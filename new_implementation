package com.ng.com.bt.test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;

class TreeTest {

    private Tree tree = new Tree();

    public static void main(String[] args) {
        TreeTest treeTest = new TreeTest();
        treeTest.initServer();
        treeTest.processClientConnection();
    }
    public void initServer() {
        String filename = "/home/kabir/Desktop/input_data.txt"; // read from file
        try{
            BufferedReader in = new BufferedReader(new FileReader(filename));
            int n = Integer.parseInt(in.readLine());
            while(n-- != 0){
                String[] input = in.readLine().split(",");
                int parent = Integer.parseInt(input[0]);
                int child = Integer.parseInt(input[1]);
                double probability = Double.valueOf(Double.parseDouble(input[2])/100.0);
                tree.insert(parent, child, probability);
            }
            in.close();
        } catch(Exception ex){
            System.out.println("Exception: " + ex);
        }
        System.out.println("Initializing server...");
    }

    public void processClientConnection() {
        String fileName = "/home/kabir/Desktop/input_test.txt"; // read from file
        try {
            BufferedReader reader = new BufferedReader(new FileReader(fileName));
            String line;
            while ((line = reader.readLine()) != null) {
                if (line.equals("END")) {
                    break;
                }
                String[] data = line.split(",");
                String answer = "";
                int nodeA = Integer.parseInt(data[0]);
                int nodeB = Integer.parseInt(data[1]);
                double query = Math.pow(10, Double.valueOf(data[2]));
                if (tree.checkProbability(nodeA, nodeB, query)) {
                    answer = "YES";
                } else {
                    answer = "NO";
                }
                writeStringToSocker(answer);
            }
            reader.close();
        } catch (Exception e) {
            System.err.format("Exception occurred trying to read '%s'.", fileName);
            e.printStackTrace();
        }
    }
    public static void writeStringToSocker(String answer) {
        System.out.println(answer);
    }
}

class Tree {

    private Map<Integer, Integer> nodes;
    private Map<Integer, Integer> depths;
    private Map<String, Double> probabilities;
    private Map<Integer, Integer> parents;

    public Tree() {
        nodes = new HashMap<>();
        depths = new HashMap<>();
        probabilities = new HashMap<>();
        parents = new HashMap<>();
        depths.put(1, 0);
    }

    public void insert(Integer parent, Integer child, double prob) {
        this.nodes.put(child, parent);
        this.depths.put(child, this.depths.get(parent) + 1);
        this.probabilities.put(parent + "" + child, prob);
        this.parents.put(child, parent);
    }
    public boolean checkProbability(int a, int b, double query){
        double totalProb = 1;
        do{
            while(a > b){
                totalProb *= probabilities.get(parents.get(a) + "" + a);
                a = parents.get(a);
            }
            while(b > a){
                totalProb *= probabilities.get(parents.get(b) + "" + b);
                b = parents.get(b);
            }
        }while(a != b);
        return (totalProb >= query);
    }

}
