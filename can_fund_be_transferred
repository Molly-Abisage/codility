--java

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by Kabir on 10/11/2017.
 */

class TreeTest {

    private static Tree tree = new Tree();

    public static void main(String[] args) {
        initServer();
        processClientConnection(null);
    }

    public static void initServer() {
        String filename = "/home/kabir/Desktop/input_data.txt"; // read from file
        try {
            BufferedReader reader = new BufferedReader(new FileReader(filename));
            String line;
            while ((line = reader.readLine()) != null) {
                if (line.contains(",")) {
                    String[] a = line.trim().split(",");
                    int parent = Integer.parseInt(a[0]);
                    int child = Integer.parseInt(a[1]);
                    tree.insert(parent, child);
                }
            }
            reader.close();
        } catch (Exception e) {
            System.err.format("Exception occurred trying to read '%s'.", filename);
            e.printStackTrace();
        }
    }

    public static void processClientConnection(Object connection) {
        String fileName = "/home/kabir/Desktop/input_test.txt"; // read from file
        try {
            BufferedReader reader = new BufferedReader(new FileReader(fileName));
            String line;
            while ((line = reader.readLine()) != null) {
                if (line.equals("END")) {
                    break;
                }
                String[] data = line.split(",");
                String answer = "";
                int nodeA = Integer.parseInt(data[0]);
                int nodeB = Integer.parseInt(data[1]);
                double query = Double.valueOf(data[2]);
                int numNodes = tree.distance(nodeA, nodeB);
//                System.out.println(nodeA + " >> " + nodeB + " :: No of nodes between is " + numNodes);
                if (numNodes <= query) {
                    answer = "YES";
                } else {
                    answer = "NO";
                }
                writeStringToSocker(connection, answer);
            }
            reader.close();
        } catch (Exception e) {
            System.err.format("Exception occurred trying to read '%s'.", fileName);
            e.printStackTrace();
        }
    }
//    public static void processClientConnection(Object connection) {
//        while (true) {
//            String message = readStringToSocker(connection);
//            if (message.equals("END")) {
//                break;
//            }
//            String[] data = message.split(",");
//            String answer = "";
//            int nodeA = Integer.parseInt(data[0]);
//            int nodeB = Integer.parseInt(data[1]);
//            int query = Integer.parseInt(data[2]);
//            int numNodes = tree.distance(nodeA, nodeB);
//            if (numNodes <= query) {
//                answer = "YES";
//            } else {
//                answer = "NO";
//            }
//            writeStringToSocker(connection, answer);
//        }
//    }

    public static void writeStringToSocker(Object connection, Object answer) {
        System.out.println(answer);
    }

//    public static String readStringToSocker(Object connection) {
//        return "No implementation Found";
//    }
}

class Tree {

    private Map<Integer, Integer> nodes;
    private Map<Integer, Integer> depths;

    public Tree() {
        nodes = new HashMap<>();
        depths = new HashMap<>();
        depths.put(1, 0);
    }

    public void insert(Integer parent, Integer child) {
        this.nodes.put(child, parent);
        this.depths.put(child, this.depths.get(parent) + 1);
    }

    public int distance(Integer nodeA, Integer nodeB) {
        if (nodeA.equals(nodeB)) {
            return 1;
        }

        int dist = 1;

        while (!nodeA.equals(nodeB)) {
            int da = this.depths.get(nodeA);
            int db = this.depths.get(nodeB);

            if (da == db) {
                nodeA = 0;
                nodeB = 0;
                dist += 2;
            } else if (da < db) {
                nodeA = 0;
                nodeB = 0;
                dist += 1;

            } else if (da > db) {
                nodeA = 0;
                nodeB = 0;
                dist += 1;
            }
        }
        return dist;
    }

}
--
